TDS_SEARCH = 'http://www.thedailyshow.com/feeds/search?keywords=%s&tags=&sortOrder=desc&sortBy=original_air_date_d&page=1'

####################################################################################################
def Search(query):

	oc = ObjectContainer(title1='The Daily Show', title2='Search Results')
	url = TDS_SEARCH % String.Quote(query)
	html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)

	for result in html.xpath('//div[@class="search-results"]/div[@class="entry"]'):
		url = result.xpath('.//span[@class="title"]/a/@href')[0]
		title = result.xpath('.//span[@class="title"]/a/text()')[0]
		summary = result.xpath('.//span[@class="description"]/text()')[0]

		try:
			thumb = result.xpath('.//img/@src')[0].split('?')[0]
			thumb = '%s?width=640' % thumb
		except:
			thumb = ''

		air_date = result.xpath('.//div[@class="info_holder"]//span[contains(., "Aired:")]/following-sibling::text()')[0]
		originally_available_at = Datetime.ParseDate(air_date).date()

		if summary[-7:-6] == '(':
			(summary, duration) = summary.rsplit(' (', 1)
			duration = Datetime.MillisecondsFromString(duration.strip(')'))

		oc.add(VideoClipObject(
			url = url,
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png'),
			originally_available_at = originally_available_at
		))

	return oc
